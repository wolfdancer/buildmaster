module BuildMaster
  # Javac Ant driver.
  # This class utilize ANT to perform the javac tasks
  class JavacAnt
    attr_reader :output_dir, :classpath
    attr_accessor :src, :resource, :target_version
    
    def initialize(output_dir, buildfile = nil)
      @output_dir = output_dir
      @classpath = Classpath.new
      if (buildfile.nil?)
        @buildfile = 'buildmaster.xml'
      else
        @buildfile = buildfile
      end
    end

    def compile()
      output_dir.mkdirs
      ant_file = output_dir.parent.file(@buildfile)
      classpath_ref = 'javac'
      ant_file.save <<ANT
<!-- ANT file generated by BuildMaster -->
<project name="buildmaster">
#{@classpath.to_ant(classpath_ref)}
  <target name="javac">
    <javac srcdir="#{src}" destdir="#{output_dir}" debug="on"#{target_attribute}>
      #{to_ant_ref(classpath_ref)}
    </javac>
    <copy todir="#{output_dir}">
      #{resource_file_set}
    </copy>
  </target>
</project>
ANT
      AntDriver.from_file(ant_file).target("javac")
    end

    private
    def to_ant_ref(refid)
      if (@classpath.empty?)
        ''
      else
        "<classpath refid=\"#{refid}\"/>"
      end
    end

    def resource_file_set
      if (resource.nil?)
        "<fileset dir=\"#{src}\" excludes=\"**/*.java\"/>"
      else
        "<fileset dir=\"#{resource}\"/>"
      end
    end

    def target_attribute
      if target_version.nil?
        ''
      else
        " target=\"#{@target_version}\""
      end
    end
  end
end