module BuildMaster
  # JUnit ANT invocation
  class JUnitAnt
    attr_reader :report, :test, :classpath, :jvmargs, :project

    def initialize(report, project = nil)
      @report = report
      @classpath = Classpath.new
      @jvmargs = Array.new
      @coverage = NilCoverage.new
      @project = project
    end

    def target_name
      'junit-ant'
    end

    def test_report
      report.dir('test')
    end

    def coverage_report
      report.dir('coverage')
    end

    def for_test(name)
      @test = JUnitAntTest.new(self, name)
      self
    end

    def for_tests(pattern)
      @test = JUnitAntBatchTest.new(self, pattern)
      self
    end

    def with_coverage(jar)
      if (jar.basename.include?('cobertura'))
        @coverage = CobertunaCoverage.new(jar, project)
      else
        raise "do not know how to set up coverage tasks for #{jar}"
      end
      self
    end

    def generate(buildfile = nil)
      if (test.nil?)
        raise 'test is not specified for junit task'
      end
      buildfile = report.file('junit-ant.xml') unless buildfile
      classpath_id = 'refid'
      @coverage.modify_classpath(classpath)
      buildfile.write do |file|
        file.puts <<BUILD
<!-- ANT file generated by buildmaste JUnitAnt -->
<project name="junit-ant" default="junit-ant">
#{@coverage.task_def}
#{classpath.to_ant(classpath_id)}
  <target name="#{target_name}">
#{@coverage.instrument_task}
    <junit printsummary="yes" fork="yes" forkmode="perBatch" errorproperty="error" failureproperty="failure" haltonerror="no" haltonfailure="no">
      <formatter type="xml"/>
#{@coverage.sysproperty}#{classpath_ref(classpath_id)}#{jvmarg_elements}#{test.to_ant}    </junit>
    <junitreport todir="#{test_report}">
        <fileset dir="#{test_report}">
            <include name="TEST-*.xml"/>
        </fileset>
        <report todir="#{test_report}" format="frames"/>
    </junitreport>
#{@coverage.report_task(coverage_report)}
    <fail message="test failed">
      <condition>
        <or>
          <isset property="fail"/>
          <isset property="error"/>
        </or>
      </condition>
    </fail>
  </target>
</project>
BUILD
      end
      buildfile
    end

    def run(buildfile = nil)
      buildfile = generate(buildfile)
      @coverage.clean_instrumented_files
      test_report.mkdirs
      coverage_report.mkdirs
      AntDriver.new(buildfile).target(target_name)
    end

    private

    def classpath_ref(classpath_id)
      if (classpath.empty?)
        ''
      else
        "      <classpath refid=\"#{classpath_id}\"/>\n"
      end
    end

    def jvmarg_elements
      if @jvmargs.empty?
        ''
      else
        buffer = StringIO.new
        @jvmargs.each {|jvm| buffer << "      <jvmarg line=\"#{jvm}\"/>\n"}
        buffer.string
      end
    end
  end

  class JUnitAntTest
    attr_reader :name
    
    def initialize(junit, name)
      @name = name
      @junit = junit
    end

    def to_ant
      return <<RESULT
      <test name="#{name}" todir="#{@junit.test_report}"/>
RESULT
    end
  end

  class JUnitAntBatchTest
    def initialize(junit, pattern)
      @junit = junit
      @pattern = pattern
    end

    def to_ant
      return <<RESULT
      <batchtest fork="yes" todir="#{@junit.test_report}">
        <fileset dir="#{@junit.project.test.src}">
          <include name="**/#{@pattern}"/>
        </fileset>
      </batchtest>
RESULT
    end
  end

  class NilCoverage
    def task_def
      ''
    end

    def modify_classpath(classpath)
    end

    def instrument_task
      ''
    end

    def sysproperty
      ''
    end

    def report_task(report_dir)
      ''
    end

    def clean_instrumented_files
      ''
    end
  end

  class CobertunaCoverage
    def initialize(jar, project)
      @jar = jar
      @project = project
      @instrumented_dir = @project.output.dir('instrumented')
      @datafile = @project.output.file('cobertuna.ser')
    end

    def task_def
      return <<TASK_DEF
  <path id="coverage">
    <pathelement location="#{@jar}"/>
    <fileset dir="#{@jar.parent.dir('lib')}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  <taskdef classpathref="coverage" resource="tasks.properties"/>
TASK_DEF
    end

    def modify_classpath(classpath)
      classpath.insert @jar
      classpath.insert @instrumented_dir
    end

    def instrument_task
      return <<RESULT
    <cobertura-instrument todir="#{@instrumented_dir}" datafile="#{@datafile}">
        <fileset dir="#{@project.prod.output}">
            <include name="**/*.class"/>
        </fileset>
    </cobertura-instrument>
    <copy todir="#{@instrumented_dir}">
      <fileset dir="#{@project.prod.output}" excludes="**/*.class"/>
    </copy>
RESULT
    end

    def sysproperty
      return <<SYSPROPERTY
<sysproperty key="net.sourceforge.cobertura.datafile" file="#{@datafile}" />
SYSPROPERTY
    end

    def report_task(report_dir)
      return <<REPORT
    <cobertura-report srcdir="#{@project.src}" destdir="#{report_dir}" datafile="#{@datafile}"/>
REPORT
    end

    def clean_instrumented_files
      @instrumented_dir.delete
    end
  end

end